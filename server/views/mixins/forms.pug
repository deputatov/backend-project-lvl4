- const getInputName = (entity, property) => `${entity.constructor.name.toLowerCase()}[${property}]`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = [])
  - error = _.get(errors, propertyName)
  .form-group(class=(errors[propertyName] && 'has-danger'))
    label= propertyName
    input(
      name=getInputName(entity, propertyName)
      class=error ? 'form-control is-invalid' : 'form-control'
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if error
      .form-control-feedback.invalid-feedback=error.map(({ message }) => message).join('. ')

mixin submit(form = null)
  .form-group
    input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

mixin select(entity, propertyName, labelName, errors = [], dropdown = true)
  - error = _.get(errors, propertyName)
  .form-group(class=(errors[propertyName] && 'has-danger'))
    label=labelName
    select(
      class=error ? 'form-control is-invalid' : 'form-control'
      name=getInputName(entity, propertyName)
     )&attributes(attributes)
      if dropdown
        option
      for elem in entity[propertyName]
        option(value=elem.id selected=elem.selected) #{elem.name || elem.fullName}
    if error
      .form-control-feedback.invalid-feedback=error.map(({ message }) => message).join('. ')

mixin textarea(entity, propertyName, labelName)
  .form-group
    label=labelName
    textarea(
      class='form-control'
      name=getInputName(entity, propertyName)
      rows=3
     )&attributes(attributes) #{_.get(entity, propertyName, '')}